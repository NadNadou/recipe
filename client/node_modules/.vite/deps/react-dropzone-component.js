import {
  require_react_dom
} from "./chunk-OBIMC6IO.js";
import {
  require_react
} from "./chunk-64YSJXBX.js";
import {
  __commonJS
} from "./chunk-WGAPYIUP.js";

// node_modules/react-dropzone-component/dist/react-dropzone.js
var require_react_dropzone = __commonJS({
  "node_modules/react-dropzone-component/dist/react-dropzone.js"(exports, module) {
    !function(e, t) {
      "object" == typeof exports && "object" == typeof module ? module.exports = t(require_react(), require_react_dom()) : "function" == typeof define && define.amd ? define(["react", "react-dom"], t) : "object" == typeof exports ? exports.ReactDropzone = t(require_react(), require_react_dom()) : e.ReactDropzone = t(e.React, e.ReactDOM);
    }("undefined" != typeof self ? self : exports, function(e, t) {
      return function(e2) {
        function t2(i) {
          if (n[i])
            return n[i].exports;
          var r = n[i] = { i, l: false, exports: {} };
          return e2[i].call(r.exports, r, r.exports, t2), r.l = true, r.exports;
        }
        var n = {};
        return t2.m = e2, t2.c = n, t2.d = function(e3, n2, i) {
          t2.o(e3, n2) || Object.defineProperty(e3, n2, { configurable: false, enumerable: true, get: i });
        }, t2.n = function(e3) {
          var n2 = e3 && e3.__esModule ? function() {
            return e3.default;
          } : function() {
            return e3;
          };
          return t2.d(n2, "a", n2), n2;
        }, t2.o = function(e3, t3) {
          return Object.prototype.hasOwnProperty.call(e3, t3);
        }, t2.p = "", t2(t2.s = 1);
      }([function(t2, n) {
        t2.exports = e;
      }, function(e2, t2, n) {
        "use strict";
        function i(e3) {
          return e3 && e3.__esModule ? e3 : { default: e3 };
        }
        Object.defineProperty(t2, "__esModule", { value: true }), t2.DropzoneComponent = void 0;
        var r = /* @__PURE__ */ function() {
          function e3(e4, t3) {
            for (var n2 = 0; n2 < t3.length; n2++) {
              var i2 = t3[n2];
              i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(e4, i2.key, i2);
            }
          }
          return function(t3, n2, i2) {
            return n2 && e3(t3.prototype, n2), i2 && e3(t3, i2), t3;
          };
        }(), o = i(n(0)), s = i(n(2)), a = i(n(3)), l = n(4), u = null, c = t2.DropzoneComponent = function(e3) {
          function t3(e4) {
            !function(e5, t4) {
              if (!(e5 instanceof t4))
                throw new TypeError("Cannot call a class as a function");
            }(this, t3);
            var n2 = function(e5, t4) {
              if (!e5)
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              return !t4 || "object" != typeof t4 && "function" != typeof t4 ? e5 : t4;
            }(this, (t3.__proto__ || Object.getPrototypeOf(t3)).call(this, e4));
            return n2.state = { files: [] }, n2;
          }
          return function(e4, t4) {
            if ("function" != typeof t4 && null !== t4)
              throw new TypeError("Super expression must either be null or a function, not " + typeof t4);
            e4.prototype = Object.create(t4 && t4.prototype, { constructor: { value: e4, enumerable: false, writable: true, configurable: true } }), t4 && (Object.setPrototypeOf ? Object.setPrototypeOf(e4, t4) : e4.__proto__ = t4);
          }(t3, o.default.Component), r(t3, [{ key: "getDjsConfig", value: function() {
            var e4 = { url: this.props.config.postUrl ? this.props.config.postUrl : null };
            return this.props.djsConfig ? (0, a.default)(true, {}, e4, this.props.djsConfig) : e4;
          } }, { key: "componentDidMount", value: function() {
            var e4 = this.getDjsConfig();
            (u = u || n(5)).autoDiscover = false, this.props.config.postUrl || this.props.eventHandlers.drop || console.info('Neither postUrl nor a "drop" eventHandler specified, the React-Dropzone component might misbehave.');
            var t4 = this.props.config.dropzoneSelector || s.default.findDOMNode(this);
            this.dropzone = new u(t4, e4), this.setupEvents();
          } }, { key: "componentWillUnmount", value: function() {
            var e4 = this;
            if (this.dropzone)
              if (this.dropzone.getActiveFiles().length > 0) {
                this.queueDestroy = true;
                var t4 = window.setInterval(function() {
                  return false === e4.queueDestroy ? window.clearInterval(t4) : 0 === e4.dropzone.getActiveFiles().length ? (e4.dropzone = e4.destroy(e4.dropzone), window.clearInterval(t4)) : void 0;
                }, 500);
              } else
                this.dropzone = this.destroy(this.dropzone);
          } }, { key: "componentDidUpdate", value: function() {
            if (this.queueDestroy = false, !this.dropzone) {
              var e4 = this.props.config.dropzoneSelector || s.default.findDOMNode(this);
              this.dropzone = new u(e4, this.getDjsConfig());
            }
          } }, { key: "componentWillUpdate", value: function() {
            var e4, t4 = void 0;
            e4 = this.props.djsConfig ? this.props.djsConfig : {};
            try {
              t4 = this.props.config.postUrl ? { url: this.props.config.postUrl } : {};
            } catch (e5) {
              t4 = {};
            }
            this.dropzone.options = (0, a.default)(true, {}, this.dropzone.options, e4, t4);
          } }, { key: "render", value: function() {
            var e4 = [], t4 = this.state.files, n2 = this.props.config, i2 = this.props.className ? "filepicker dropzone " + this.props.className : "filepicker dropzone";
            if (n2.showFiletypeIcon && n2.iconFiletypes && (!t4 || t4.length < 1))
              for (var r2 = 0; r2 < this.props.config.iconFiletypes.length; r2 += 1)
                e4.push(o.default.createElement(l.Icon, { filetype: n2.iconFiletypes[r2], key: "icon-component" + r2 }));
            return !this.props.config.postUrl && this.props.action ? o.default.createElement("form", { action: this.props.action, className: i2 }, e4, this.props.children) : o.default.createElement("div", { className: i2 }, " ", e4, " ", this.props.children, " ");
          } }, { key: "setupEvents", value: function() {
            var e4 = this, t4 = this.props.eventHandlers;
            if (this.dropzone && t4) {
              for (var n2 in t4)
                if (t4.hasOwnProperty(n2) && t4[n2])
                  if ("[object Array]" === Object.prototype.toString.call(t4[n2]))
                    for (var i2 = 0; i2 < t4[n2].length; i2 += 1)
                      "init" === n2 ? t4[n2][i2](this.dropzone) : this.dropzone.on(n2, t4[n2][i2]);
                  else
                    "init" === n2 ? t4[n2](this.dropzone) : this.dropzone.on(n2, t4[n2]);
              this.dropzone.on("addedfile", function(t5) {
                if (t5) {
                  var n3 = e4.state.files || [];
                  n3.push(t5), e4.setState({ files: n3 });
                }
              }), this.dropzone.on("removedfile", function(t5) {
                if (t5) {
                  var n3 = e4.state.files || [];
                  n3.forEach(function(e5, i3) {
                    e5.name === t5.name && e5.size === t5.size && n3.splice(i3, 1);
                  }), e4.setState({ files: n3 });
                }
              });
            }
          } }, { key: "destroy", value: function(e4) {
            return e4.off(), e4.destroy();
          } }]), t3;
        }();
        c.defaultProps = { djsConfig: {}, config: {}, eventHandlers: {} }, t2.default = c;
      }, function(e2, n) {
        e2.exports = t;
      }, function(e2, t2, n) {
        "use strict";
        var i = Object.prototype.hasOwnProperty, r = Object.prototype.toString, o = function(e3) {
          return "function" == typeof Array.isArray ? Array.isArray(e3) : "[object Array]" === r.call(e3);
        }, s = function(e3) {
          if (!e3 || "[object Object]" !== r.call(e3))
            return false;
          var t3, n2 = i.call(e3, "constructor"), o2 = e3.constructor && e3.constructor.prototype && i.call(e3.constructor.prototype, "isPrototypeOf");
          if (e3.constructor && !n2 && !o2)
            return false;
          for (t3 in e3)
            ;
          return void 0 === t3 || i.call(e3, t3);
        };
        e2.exports = function e3() {
          var t3, n2, i2, r2, a, l, u = arguments[0], c = 1, d = arguments.length, p = false;
          for ("boolean" == typeof u && (p = u, u = arguments[1] || {}, c = 2), (null == u || "object" != typeof u && "function" != typeof u) && (u = {}); c < d; ++c)
            if (null != (t3 = arguments[c]))
              for (n2 in t3)
                i2 = u[n2], u !== (r2 = t3[n2]) && (p && r2 && (s(r2) || (a = o(r2))) ? (a ? (a = false, l = i2 && o(i2) ? i2 : []) : l = i2 && s(i2) ? i2 : {}, u[n2] = e3(p, l, r2)) : void 0 !== r2 && (u[n2] = r2));
          return u;
        };
      }, function(e2, t2, n) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.Icon = void 0;
        var i, r = n(0), o = (i = r) && i.__esModule ? i : { default: i };
        t2.Icon = function(e3) {
          return o.default.createElement("div", { "data-filetype": e3.filetype, className: "filepicker-file-icon" });
        };
      }, function(e2, t2, n) {
        "use strict";
        (function(e3) {
          function t3(e4, t4) {
            if (!e4)
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !t4 || "object" != typeof t4 && "function" != typeof t4 ? e4 : t4;
          }
          function n2(e4, t4) {
            if (!(e4 instanceof t4))
              throw new TypeError("Cannot call a class as a function");
          }
          var i = /* @__PURE__ */ function() {
            function e4(e5, t4) {
              for (var n3 = 0; n3 < t4.length; n3++) {
                var i2 = t4[n3];
                i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(e5, i2.key, i2);
              }
            }
            return function(t4, n3, i2) {
              return n3 && e4(t4.prototype, n3), i2 && e4(t4, i2), t4;
            };
          }(), r = function() {
            function e4() {
              n2(this, e4);
            }
            return i(e4, [{ key: "on", value: function(e5, t4) {
              return this._callbacks = this._callbacks || {}, this._callbacks[e5] || (this._callbacks[e5] = []), this._callbacks[e5].push(t4), this;
            } }, { key: "emit", value: function(e5) {
              this._callbacks = this._callbacks || {};
              var t4 = this._callbacks[e5];
              if (t4) {
                for (var n3 = arguments.length, i2 = Array(n3 > 1 ? n3 - 1 : 0), r2 = 1; r2 < n3; r2++)
                  i2[r2 - 1] = arguments[r2];
                for (var o2 = 0, s2 = s2 = t4; !(o2 >= s2.length); )
                  s2[o2++].apply(this, i2);
              }
              return this;
            } }, { key: "off", value: function(e5, t4) {
              if (!this._callbacks || 0 === arguments.length)
                return this._callbacks = {}, this;
              var n3 = this._callbacks[e5];
              if (!n3)
                return this;
              if (1 === arguments.length)
                return delete this._callbacks[e5], this;
              for (var i2 = 0; i2 < n3.length; i2++)
                if (n3[i2] === t4) {
                  n3.splice(i2, 1);
                  break;
                }
              return this;
            } }]), e4;
          }(), o = function(e4) {
            function o2(e5, i2) {
              n2(this, o2);
              var r2, s2 = t3(this, (o2.__proto__ || Object.getPrototypeOf(o2)).call(this)), a2 = void 0;
              if (s2.element = e5, s2.version = o2.version, s2.defaultOptions.previewTemplate = s2.defaultOptions.previewTemplate.replace(/\n*/g, ""), s2.clickableElements = [], s2.listeners = [], s2.files = [], "string" == typeof s2.element && (s2.element = document.querySelector(s2.element)), !s2.element || null == s2.element.nodeType)
                throw new Error("Invalid dropzone element.");
              if (s2.element.dropzone)
                throw new Error("Dropzone already attached.");
              o2.instances.push(s2), s2.element.dropzone = s2;
              var l2, u2 = null != (r2 = o2.optionsForElement(s2.element)) ? r2 : {};
              if (s2.options = o2.extend({}, s2.defaultOptions, u2, null != i2 ? i2 : {}), s2.options.forceFallback || !o2.isBrowserSupported())
                return l2 = s2.options.fallback.call(s2), t3(s2, l2);
              if (null == s2.options.url && (s2.options.url = s2.element.getAttribute("action")), !s2.options.url)
                throw new Error("No URL provided.");
              if (s2.options.acceptedFiles && s2.options.acceptedMimeTypes)
                throw new Error("You can't provide both 'acceptedFiles' and 'acceptedMimeTypes'. 'acceptedMimeTypes' is deprecated.");
              if (s2.options.uploadMultiple && s2.options.chunking)
                throw new Error("You cannot set both: uploadMultiple and chunking.");
              return s2.options.acceptedMimeTypes && (s2.options.acceptedFiles = s2.options.acceptedMimeTypes, delete s2.options.acceptedMimeTypes), null != s2.options.renameFilename && (s2.options.renameFile = function(e6) {
                return s2.options.renameFilename.call(s2, e6.name, e6);
              }), s2.options.method = s2.options.method.toUpperCase(), (a2 = s2.getExistingFallback()) && a2.parentNode && a2.parentNode.removeChild(a2), false !== s2.options.previewsContainer && (s2.options.previewsContainer ? s2.previewsContainer = o2.getElement(s2.options.previewsContainer, "previewsContainer") : s2.previewsContainer = s2.element), s2.options.clickable && (true === s2.options.clickable ? s2.clickableElements = [s2.element] : s2.clickableElements = o2.getElements(s2.options.clickable, "clickable")), s2.init(), s2;
            }
            return function(e5, t4) {
              if ("function" != typeof t4 && null !== t4)
                throw new TypeError("Super expression must either be null or a function, not " + typeof t4);
              e5.prototype = Object.create(t4 && t4.prototype, { constructor: { value: e5, enumerable: false, writable: true, configurable: true } }), t4 && (Object.setPrototypeOf ? Object.setPrototypeOf(e5, t4) : e5.__proto__ = t4);
            }(o2, r), i(o2, null, [{ key: "initClass", value: function() {
              this.prototype.Emitter = r, this.prototype.events = ["drop", "dragstart", "dragend", "dragenter", "dragover", "dragleave", "addedfile", "addedfiles", "removedfile", "thumbnail", "error", "errormultiple", "processing", "processingmultiple", "uploadprogress", "totaluploadprogress", "sending", "sendingmultiple", "success", "successmultiple", "canceled", "canceledmultiple", "complete", "completemultiple", "reset", "maxfilesexceeded", "maxfilesreached", "queuecomplete"], this.prototype.defaultOptions = { url: null, method: "post", withCredentials: false, timeout: 3e4, parallelUploads: 2, uploadMultiple: false, chunking: false, forceChunking: false, chunkSize: 2e6, parallelChunkUploads: false, retryChunks: false, retryChunksLimit: 3, maxFilesize: 256, paramName: "file", createImageThumbnails: true, maxThumbnailFilesize: 10, thumbnailWidth: 120, thumbnailHeight: 120, thumbnailMethod: "crop", resizeWidth: null, resizeHeight: null, resizeMimeType: null, resizeQuality: 0.8, resizeMethod: "contain", filesizeBase: 1e3, maxFiles: null, headers: null, clickable: true, ignoreHiddenFiles: true, acceptedFiles: null, acceptedMimeTypes: null, autoProcessQueue: true, autoQueue: true, addRemoveLinks: false, previewsContainer: null, hiddenInputContainer: "body", capture: null, renameFilename: null, renameFile: null, forceFallback: false, dictDefaultMessage: "Drop files here to upload", dictFallbackMessage: "Your browser does not support drag'n'drop file uploads.", dictFallbackText: "Please use the fallback form below to upload your files like in the olden days.", dictFileTooBig: "File is too big ({{filesize}}MiB). Max filesize: {{maxFilesize}}MiB.", dictInvalidFileType: "You can't upload files of this type.", dictResponseError: "Server responded with {{statusCode}} code.", dictCancelUpload: "Cancel upload", dictUploadCanceled: "Upload canceled.", dictCancelUploadConfirmation: "Are you sure you want to cancel this upload?", dictRemoveFile: "Remove file", dictRemoveFileConfirmation: null, dictMaxFilesExceeded: "You can not upload any more files.", dictFileSizeUnits: { tb: "TB", gb: "GB", mb: "MB", kb: "KB", b: "b" }, init: function() {
              }, params: function(e5, t4, n3) {
                if (n3)
                  return { dzuuid: n3.file.upload.uuid, dzchunkindex: n3.index, dztotalfilesize: n3.file.size, dzchunksize: this.options.chunkSize, dztotalchunkcount: n3.file.upload.totalChunkCount, dzchunkbyteoffset: n3.index * this.options.chunkSize };
              }, accept: function(e5, t4) {
                return t4();
              }, chunksUploaded: function(e5, t4) {
                t4();
              }, fallback: function() {
                var e5 = void 0;
                this.element.className = this.element.className + " dz-browser-not-supported";
                for (var t4 = 0, n3 = n3 = this.element.getElementsByTagName("div"); !(t4 >= n3.length); ) {
                  var i2 = n3[t4++];
                  if (/(^| )dz-message($| )/.test(i2.className)) {
                    e5 = i2, i2.className = "dz-message";
                    break;
                  }
                }
                e5 || (e5 = o2.createElement('<div class="dz-message"><span></span></div>'), this.element.appendChild(e5));
                var r2 = e5.getElementsByTagName("span")[0];
                return r2 && (null != r2.textContent ? r2.textContent = this.options.dictFallbackMessage : null != r2.innerText && (r2.innerText = this.options.dictFallbackMessage)), this.element.appendChild(this.getFallbackForm());
              }, resize: function(e5, t4, n3, i2) {
                var r2 = { srcX: 0, srcY: 0, srcWidth: e5.width, srcHeight: e5.height }, o3 = e5.width / e5.height;
                null == t4 && null == n3 ? (t4 = r2.srcWidth, n3 = r2.srcHeight) : null == t4 ? t4 = n3 * o3 : null == n3 && (n3 = t4 / o3);
                var s2 = (t4 = Math.min(t4, r2.srcWidth)) / (n3 = Math.min(n3, r2.srcHeight));
                if (r2.srcWidth > t4 || r2.srcHeight > n3)
                  if ("crop" === i2)
                    o3 > s2 ? (r2.srcHeight = e5.height, r2.srcWidth = r2.srcHeight * s2) : (r2.srcWidth = e5.width, r2.srcHeight = r2.srcWidth / s2);
                  else {
                    if ("contain" !== i2)
                      throw new Error("Unknown resizeMethod '" + i2 + "'");
                    o3 > s2 ? n3 = t4 / o3 : t4 = n3 * o3;
                  }
                return r2.srcX = (e5.width - r2.srcWidth) / 2, r2.srcY = (e5.height - r2.srcHeight) / 2, r2.trgWidth = t4, r2.trgHeight = n3, r2;
              }, transformFile: function(e5, t4) {
                return (this.options.resizeWidth || this.options.resizeHeight) && e5.type.match(/image.*/) ? this.resizeImage(e5, this.options.resizeWidth, this.options.resizeHeight, this.options.resizeMethod, t4) : t4(e5);
              }, previewTemplate: '<div class="dz-preview dz-file-preview">\n  <div class="dz-image"><img data-dz-thumbnail /></div>\n  <div class="dz-details">\n    <div class="dz-size"><span data-dz-size></span></div>\n    <div class="dz-filename"><span data-dz-name></span></div>\n  </div>\n  <div class="dz-progress"><span class="dz-upload" data-dz-uploadprogress></span></div>\n  <div class="dz-error-message"><span data-dz-errormessage></span></div>\n  <div class="dz-success-mark">\n    <svg width="54px" height="54px" viewBox="0 0 54 54" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:sketch="http://www.bohemiancoding.com/sketch/ns">\n      <title>Check</title>\n      <defs></defs>\n      <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" sketch:type="MSPage">\n        <path d="M23.5,31.8431458 L17.5852419,25.9283877 C16.0248253,24.3679711 13.4910294,24.366835 11.9289322,25.9289322 C10.3700136,27.4878508 10.3665912,30.0234455 11.9283877,31.5852419 L20.4147581,40.0716123 C20.5133999,40.1702541 20.6159315,40.2626649 20.7218615,40.3488435 C22.2835669,41.8725651 24.794234,41.8626202 26.3461564,40.3106978 L43.3106978,23.3461564 C44.8771021,21.7797521 44.8758057,19.2483887 43.3137085,17.6862915 C41.7547899,16.1273729 39.2176035,16.1255422 37.6538436,17.6893022 L23.5,31.8431458 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z" id="Oval-2" stroke-opacity="0.198794158" stroke="#747474" fill-opacity="0.816519475" fill="#FFFFFF" sketch:type="MSShapeGroup"></path>\n      </g>\n    </svg>\n  </div>\n  <div class="dz-error-mark">\n    <svg width="54px" height="54px" viewBox="0 0 54 54" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:sketch="http://www.bohemiancoding.com/sketch/ns">\n      <title>Error</title>\n      <defs></defs>\n      <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" sketch:type="MSPage">\n        <g id="Check-+-Oval-2" sketch:type="MSLayerGroup" stroke="#747474" stroke-opacity="0.198794158" fill="#FFFFFF" fill-opacity="0.816519475">\n          <path d="M32.6568542,29 L38.3106978,23.3461564 C39.8771021,21.7797521 39.8758057,19.2483887 38.3137085,17.6862915 C36.7547899,16.1273729 34.2176035,16.1255422 32.6538436,17.6893022 L27,23.3431458 L21.3461564,17.6893022 C19.7823965,16.1255422 17.2452101,16.1273729 15.6862915,17.6862915 C14.1241943,19.2483887 14.1228979,21.7797521 15.6893022,23.3461564 L21.3431458,29 L15.6893022,34.6538436 C14.1228979,36.2202479 14.1241943,38.7516113 15.6862915,40.3137085 C17.2452101,41.8726271 19.7823965,41.8744578 21.3461564,40.3106978 L27,34.6568542 L32.6538436,40.3106978 C34.2176035,41.8744578 36.7547899,41.8726271 38.3137085,40.3137085 C39.8758057,38.7516113 39.8771021,36.2202479 38.3106978,34.6538436 L32.6568542,29 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z" id="Oval-2" sketch:type="MSShapeGroup"></path>\n        </g>\n      </g>\n    </svg>\n  </div>\n</div>', drop: function(e5) {
                return this.element.classList.remove("dz-drag-hover");
              }, dragstart: function(e5) {
              }, dragend: function(e5) {
                return this.element.classList.remove("dz-drag-hover");
              }, dragenter: function(e5) {
                return this.element.classList.add("dz-drag-hover");
              }, dragover: function(e5) {
                return this.element.classList.add("dz-drag-hover");
              }, dragleave: function(e5) {
                return this.element.classList.remove("dz-drag-hover");
              }, paste: function(e5) {
              }, reset: function() {
                return this.element.classList.remove("dz-started");
              }, addedfile: function(e5) {
                var t4 = this;
                if (this.element === this.previewsContainer && this.element.classList.add("dz-started"), this.previewsContainer) {
                  e5.previewElement = o2.createElement(this.options.previewTemplate.trim()), e5.previewTemplate = e5.previewElement, this.previewsContainer.appendChild(e5.previewElement);
                  for (var n3 = 0, i2 = i2 = e5.previewElement.querySelectorAll("[data-dz-name]"); !(n3 >= i2.length); ) {
                    var r2 = i2[n3++];
                    r2.textContent = e5.name;
                  }
                  for (var s2 = 0, a2 = a2 = e5.previewElement.querySelectorAll("[data-dz-size]"); !(s2 >= a2.length); )
                    (r2 = a2[s2++]).innerHTML = this.filesize(e5.size);
                  this.options.addRemoveLinks && (e5._removeLink = o2.createElement('<a class="dz-remove" href="javascript:undefined;" data-dz-remove>' + this.options.dictRemoveFile + "</a>"), e5.previewElement.appendChild(e5._removeLink));
                  for (var l2 = function(n4) {
                    return n4.preventDefault(), n4.stopPropagation(), e5.status === o2.UPLOADING ? o2.confirm(t4.options.dictCancelUploadConfirmation, function() {
                      return t4.removeFile(e5);
                    }) : t4.options.dictRemoveFileConfirmation ? o2.confirm(t4.options.dictRemoveFileConfirmation, function() {
                      return t4.removeFile(e5);
                    }) : t4.removeFile(e5);
                  }, u2 = 0, c = c = e5.previewElement.querySelectorAll("[data-dz-remove]"); !(u2 >= c.length); )
                    c[u2++].addEventListener("click", l2);
                }
              }, removedfile: function(e5) {
                return null != e5.previewElement && null != e5.previewElement.parentNode && e5.previewElement.parentNode.removeChild(e5.previewElement), this._updateMaxFilesReachedClass();
              }, thumbnail: function(e5, t4) {
                if (e5.previewElement) {
                  e5.previewElement.classList.remove("dz-file-preview");
                  for (var n3 = 0, i2 = i2 = e5.previewElement.querySelectorAll("[data-dz-thumbnail]"); !(n3 >= i2.length); ) {
                    var r2 = i2[n3++];
                    r2.alt = e5.name, r2.src = t4;
                  }
                  return setTimeout(function() {
                    return e5.previewElement.classList.add("dz-image-preview");
                  }, 1);
                }
              }, error: function(e5, t4) {
                if (e5.previewElement) {
                  e5.previewElement.classList.add("dz-error"), "String" != typeof t4 && t4.error && (t4 = t4.error);
                  for (var n3 = 0, i2 = i2 = e5.previewElement.querySelectorAll("[data-dz-errormessage]"); !(n3 >= i2.length); )
                    i2[n3++].textContent = t4;
                }
              }, errormultiple: function() {
              }, processing: function(e5) {
                if (e5.previewElement && (e5.previewElement.classList.add("dz-processing"), e5._removeLink))
                  return e5._removeLink.textContent = this.options.dictCancelUpload;
              }, processingmultiple: function() {
              }, uploadprogress: function(e5, t4, n3) {
                if (e5.previewElement)
                  for (var i2 = 0, r2 = r2 = e5.previewElement.querySelectorAll("[data-dz-uploadprogress]"); !(i2 >= r2.length); ) {
                    var o3 = r2[i2++];
                    "PROGRESS" === o3.nodeName ? o3.value = t4 : o3.style.width = t4 + "%";
                  }
              }, totaluploadprogress: function() {
              }, sending: function() {
              }, sendingmultiple: function() {
              }, success: function(e5) {
                if (e5.previewElement)
                  return e5.previewElement.classList.add("dz-success");
              }, successmultiple: function() {
              }, canceled: function(e5) {
                return this.emit("error", e5, this.options.dictUploadCanceled);
              }, canceledmultiple: function() {
              }, complete: function(e5) {
                if (e5._removeLink && (e5._removeLink.textContent = this.options.dictRemoveFile), e5.previewElement)
                  return e5.previewElement.classList.add("dz-complete");
              }, completemultiple: function() {
              }, maxfilesexceeded: function() {
              }, maxfilesreached: function() {
              }, queuecomplete: function() {
              }, addedfiles: function() {
              } }, this.prototype._thumbnailQueue = [], this.prototype._processingThumbnail = false;
            } }, { key: "extend", value: function(e5) {
              for (var t4 = arguments.length, n3 = Array(t4 > 1 ? t4 - 1 : 0), i2 = 1; i2 < t4; i2++)
                n3[i2 - 1] = arguments[i2];
              for (var r2 = 0, o3 = o3 = n3; !(r2 >= o3.length); ) {
                var s2 = o3[r2++];
                for (var a2 in s2) {
                  var l2 = s2[a2];
                  e5[a2] = l2;
                }
              }
              return e5;
            } }]), i(o2, [{ key: "getAcceptedFiles", value: function() {
              return this.files.filter(function(e5) {
                return e5.accepted;
              }).map(function(e5) {
                return e5;
              });
            } }, { key: "getRejectedFiles", value: function() {
              return this.files.filter(function(e5) {
                return !e5.accepted;
              }).map(function(e5) {
                return e5;
              });
            } }, { key: "getFilesWithStatus", value: function(e5) {
              return this.files.filter(function(t4) {
                return t4.status === e5;
              }).map(function(e6) {
                return e6;
              });
            } }, { key: "getQueuedFiles", value: function() {
              return this.getFilesWithStatus(o2.QUEUED);
            } }, { key: "getUploadingFiles", value: function() {
              return this.getFilesWithStatus(o2.UPLOADING);
            } }, { key: "getAddedFiles", value: function() {
              return this.getFilesWithStatus(o2.ADDED);
            } }, { key: "getActiveFiles", value: function() {
              return this.files.filter(function(e5) {
                return e5.status === o2.UPLOADING || e5.status === o2.QUEUED;
              }).map(function(e5) {
                return e5;
              });
            } }, { key: "init", value: function() {
              var e5 = this;
              "form" === this.element.tagName && this.element.setAttribute("enctype", "multipart/form-data"), this.element.classList.contains("dropzone") && !this.element.querySelector(".dz-message") && this.element.appendChild(o2.createElement('<div class="dz-default dz-message"><span>' + this.options.dictDefaultMessage + "</span></div>")), this.clickableElements.length && function t5() {
                return e5.hiddenFileInput && e5.hiddenFileInput.parentNode.removeChild(e5.hiddenFileInput), e5.hiddenFileInput = document.createElement("input"), e5.hiddenFileInput.setAttribute("type", "file"), (null === e5.options.maxFiles || e5.options.maxFiles > 1) && e5.hiddenFileInput.setAttribute("multiple", "multiple"), e5.hiddenFileInput.className = "dz-hidden-input", null !== e5.options.acceptedFiles && e5.hiddenFileInput.setAttribute("accept", e5.options.acceptedFiles), null !== e5.options.capture && e5.hiddenFileInput.setAttribute("capture", e5.options.capture), e5.hiddenFileInput.style.visibility = "hidden", e5.hiddenFileInput.style.position = "absolute", e5.hiddenFileInput.style.top = "0", e5.hiddenFileInput.style.left = "0", e5.hiddenFileInput.style.height = "0", e5.hiddenFileInput.style.width = "0", document.querySelector(e5.options.hiddenInputContainer).appendChild(e5.hiddenFileInput), e5.hiddenFileInput.addEventListener("change", function() {
                  var n4 = e5.hiddenFileInput.files;
                  if (n4.length)
                    for (var i3 = 0, r3 = r3 = n4; !(i3 >= r3.length); ) {
                      var o3 = r3[i3++];
                      e5.addFile(o3);
                    }
                  return e5.emit("addedfiles", n4), t5();
                });
              }(), this.URL = null !== window.URL ? window.URL : window.webkitURL;
              for (var t4 = 0, n3 = n3 = this.events; !(t4 >= n3.length); ) {
                var i2 = n3[t4++];
                this.on(i2, this.options[i2]);
              }
              this.on("uploadprogress", function() {
                return e5.updateTotalUploadProgress();
              }), this.on("removedfile", function() {
                return e5.updateTotalUploadProgress();
              }), this.on("canceled", function(t5) {
                return e5.emit("complete", t5);
              }), this.on("complete", function(t5) {
                if (0 === e5.getAddedFiles().length && 0 === e5.getUploadingFiles().length && 0 === e5.getQueuedFiles().length)
                  return setTimeout(function() {
                    return e5.emit("queuecomplete");
                  }, 0);
              });
              var r2 = function(e6) {
                return e6.stopPropagation(), e6.preventDefault ? e6.preventDefault() : e6.returnValue = false;
              };
              return this.listeners = [{ element: this.element, events: { dragstart: function(t5) {
                return e5.emit("dragstart", t5);
              }, dragenter: function(t5) {
                return r2(t5), e5.emit("dragenter", t5);
              }, dragover: function(t5) {
                var n4 = void 0;
                try {
                  n4 = t5.dataTransfer.effectAllowed;
                } catch (e6) {
                }
                return t5.dataTransfer.dropEffect = "move" === n4 || "linkMove" === n4 ? "move" : "copy", r2(t5), e5.emit("dragover", t5);
              }, dragleave: function(t5) {
                return e5.emit("dragleave", t5);
              }, drop: function(t5) {
                return r2(t5), e5.drop(t5);
              }, dragend: function(t5) {
                return e5.emit("dragend", t5);
              } } }], this.clickableElements.forEach(function(t5) {
                return e5.listeners.push({ element: t5, events: { click: function(n4) {
                  return (t5 !== e5.element || n4.target === e5.element || o2.elementInside(n4.target, e5.element.querySelector(".dz-message"))) && e5.hiddenFileInput.click(), true;
                } } });
              }), this.enable(), this.options.init.call(this);
            } }, { key: "destroy", value: function() {
              return this.disable(), this.removeAllFiles(true), (null != this.hiddenFileInput ? this.hiddenFileInput.parentNode : void 0) && (this.hiddenFileInput.parentNode.removeChild(this.hiddenFileInput), this.hiddenFileInput = null), delete this.element.dropzone, o2.instances.splice(o2.instances.indexOf(this), 1);
            } }, { key: "updateTotalUploadProgress", value: function() {
              var e5 = void 0, t4 = 0, n3 = 0;
              if (this.getActiveFiles().length) {
                for (var i2 = 0, r2 = r2 = this.getActiveFiles(); !(i2 >= r2.length); ) {
                  var o3 = r2[i2++];
                  t4 += o3.upload.bytesSent, n3 += o3.upload.total;
                }
                e5 = 100 * t4 / n3;
              } else
                e5 = 100;
              return this.emit("totaluploadprogress", e5, n3, t4);
            } }, { key: "_getParamName", value: function(e5) {
              return "function" == typeof this.options.paramName ? this.options.paramName(e5) : this.options.paramName + (this.options.uploadMultiple ? "[" + e5 + "]" : "");
            } }, { key: "_renameFile", value: function(e5) {
              return "function" != typeof this.options.renameFile ? e5.name : this.options.renameFile(e5);
            } }, { key: "getFallbackForm", value: function() {
              var e5, t4 = void 0;
              if (e5 = this.getExistingFallback())
                return e5;
              var n3 = '<div class="dz-fallback">';
              this.options.dictFallbackText && (n3 += "<p>" + this.options.dictFallbackText + "</p>"), n3 += '<input type="file" name="' + this._getParamName(0) + '" ' + (this.options.uploadMultiple ? 'multiple="multiple"' : void 0) + ' /><input type="submit" value="Upload!"></div>';
              var i2 = o2.createElement(n3);
              return "FORM" !== this.element.tagName ? (t4 = o2.createElement('<form action="' + this.options.url + '" enctype="multipart/form-data" method="' + this.options.method + '"></form>')).appendChild(i2) : (this.element.setAttribute("enctype", "multipart/form-data"), this.element.setAttribute("method", this.options.method)), null != t4 ? t4 : i2;
            } }, { key: "getExistingFallback", value: function() {
              for (var e5 = ["div", "form"], t4 = 0; t4 < e5.length; t4++) {
                var n3, i2 = e5[t4];
                if (n3 = function(e6) {
                  for (var t5 = 0, n4 = n4 = e6; !(t5 >= n4.length); ) {
                    var i3 = n4[t5++];
                    if (/(^| )fallback($| )/.test(i3.className))
                      return i3;
                  }
                }(this.element.getElementsByTagName(i2)))
                  return n3;
              }
            } }, { key: "setupEventListeners", value: function() {
              return this.listeners.map(function(e5) {
                return function() {
                  var t4 = [];
                  for (var n3 in e5.events) {
                    var i2 = e5.events[n3];
                    t4.push(e5.element.addEventListener(n3, i2, false));
                  }
                  return t4;
                }();
              });
            } }, { key: "removeEventListeners", value: function() {
              return this.listeners.map(function(e5) {
                return function() {
                  var t4 = [];
                  for (var n3 in e5.events) {
                    var i2 = e5.events[n3];
                    t4.push(e5.element.removeEventListener(n3, i2, false));
                  }
                  return t4;
                }();
              });
            } }, { key: "disable", value: function() {
              var e5 = this;
              return this.clickableElements.forEach(function(e6) {
                return e6.classList.remove("dz-clickable");
              }), this.removeEventListeners(), this.disabled = true, this.files.map(function(t4) {
                return e5.cancelUpload(t4);
              });
            } }, { key: "enable", value: function() {
              return delete this.disabled, this.clickableElements.forEach(function(e5) {
                return e5.classList.add("dz-clickable");
              }), this.setupEventListeners();
            } }, { key: "filesize", value: function(e5) {
              var t4 = 0, n3 = "b";
              if (e5 > 0) {
                for (var i2 = ["tb", "gb", "mb", "kb", "b"], r2 = 0; r2 < i2.length; r2++) {
                  var o3 = i2[r2];
                  if (e5 >= Math.pow(this.options.filesizeBase, 4 - r2) / 10) {
                    t4 = e5 / Math.pow(this.options.filesizeBase, 4 - r2), n3 = o3;
                    break;
                  }
                }
                t4 = Math.round(10 * t4) / 10;
              }
              return "<strong>" + t4 + "</strong> " + this.options.dictFileSizeUnits[n3];
            } }, { key: "_updateMaxFilesReachedClass", value: function() {
              return null != this.options.maxFiles && this.getAcceptedFiles().length >= this.options.maxFiles ? (this.getAcceptedFiles().length === this.options.maxFiles && this.emit("maxfilesreached", this.files), this.element.classList.add("dz-max-files-reached")) : this.element.classList.remove("dz-max-files-reached");
            } }, { key: "drop", value: function(e5) {
              if (e5.dataTransfer) {
                this.emit("drop", e5);
                for (var t4 = [], n3 = 0; n3 < e5.dataTransfer.files.length; n3++)
                  t4[n3] = e5.dataTransfer.files[n3];
                if (this.emit("addedfiles", t4), t4.length) {
                  var i2 = e5.dataTransfer.items;
                  i2 && i2.length && null != i2[0].webkitGetAsEntry ? this._addFilesFromItems(i2) : this.handleFiles(t4);
                }
              }
            } }, { key: "paste", value: function(e5) {
              if (null != (void 0 !== (t4 = null != e5 ? e5.clipboardData : void 0) && null !== t4 ? function(e6) {
                return e6.items;
              }(t4) : void 0)) {
                var t4;
                this.emit("paste", e5);
                var n3 = e5.clipboardData.items;
                return n3.length ? this._addFilesFromItems(n3) : void 0;
              }
            } }, { key: "handleFiles", value: function(e5) {
              for (var t4 = 0, n3 = n3 = e5; !(t4 >= n3.length); ) {
                var i2 = n3[t4++];
                this.addFile(i2);
              }
            } }, { key: "_addFilesFromItems", value: function(e5) {
              var t4 = this;
              return function() {
                for (var n3 = [], i2 = 0, r2 = r2 = e5; !(i2 >= r2.length); ) {
                  var o3, s2 = r2[i2++];
                  null != s2.webkitGetAsEntry && (o3 = s2.webkitGetAsEntry()) ? o3.isFile ? n3.push(t4.addFile(s2.getAsFile())) : o3.isDirectory ? n3.push(t4._addFilesFromDirectory(o3, o3.name)) : n3.push(void 0) : null == s2.getAsFile || null != s2.kind && "file" !== s2.kind ? n3.push(void 0) : n3.push(t4.addFile(s2.getAsFile()));
                }
                return n3;
              }();
            } }, { key: "_addFilesFromDirectory", value: function(e5, t4) {
              var n3 = this, i2 = e5.createReader(), r2 = function(e6) {
                return t5 = console, n4 = "log", i3 = function(t6) {
                  return t6.log(e6);
                }, void 0 !== t5 && null !== t5 && "function" == typeof t5[n4] ? i3(t5, n4) : void 0;
                var t5, n4, i3;
              };
              return function e6() {
                return i2.readEntries(function(i3) {
                  if (i3.length > 0) {
                    for (var r3 = 0, o3 = o3 = i3; !(r3 >= o3.length); ) {
                      var s2 = o3[r3++];
                      s2.isFile ? s2.file(function(e7) {
                        if (!n3.options.ignoreHiddenFiles || "." !== e7.name.substring(0, 1))
                          return e7.fullPath = t4 + "/" + e7.name, n3.addFile(e7);
                      }) : s2.isDirectory && n3._addFilesFromDirectory(s2, t4 + "/" + s2.name);
                    }
                    e6();
                  }
                  return null;
                }, r2);
              }();
            } }, { key: "accept", value: function(e5, t4) {
              return e5.size > 1024 * this.options.maxFilesize * 1024 ? t4(this.options.dictFileTooBig.replace("{{filesize}}", Math.round(e5.size / 1024 / 10.24) / 100).replace("{{maxFilesize}}", this.options.maxFilesize)) : o2.isValidFile(e5, this.options.acceptedFiles) ? null != this.options.maxFiles && this.getAcceptedFiles().length >= this.options.maxFiles ? (t4(this.options.dictMaxFilesExceeded.replace("{{maxFiles}}", this.options.maxFiles)), this.emit("maxfilesexceeded", e5)) : this.options.accept.call(this, e5, t4) : t4(this.options.dictInvalidFileType);
            } }, { key: "addFile", value: function(e5) {
              var t4 = this;
              return e5.upload = { uuid: o2.uuidv4(), progress: 0, total: e5.size, bytesSent: 0, filename: this._renameFile(e5), chunked: this.options.chunking && (this.options.forceChunking || e5.size > this.options.chunkSize), totalChunkCount: Math.ceil(e5.size / this.options.chunkSize) }, this.files.push(e5), e5.status = o2.ADDED, this.emit("addedfile", e5), this._enqueueThumbnail(e5), this.accept(e5, function(n3) {
                return n3 ? (e5.accepted = false, t4._errorProcessing([e5], n3)) : (e5.accepted = true, t4.options.autoQueue && t4.enqueueFile(e5)), t4._updateMaxFilesReachedClass();
              });
            } }, { key: "enqueueFiles", value: function(e5) {
              for (var t4 = 0, n3 = n3 = e5; !(t4 >= n3.length); ) {
                var i2 = n3[t4++];
                this.enqueueFile(i2);
              }
              return null;
            } }, { key: "enqueueFile", value: function(e5) {
              var t4 = this;
              if (e5.status !== o2.ADDED || true !== e5.accepted)
                throw new Error("This file can't be queued because it has already been processed or was rejected.");
              if (e5.status = o2.QUEUED, this.options.autoProcessQueue)
                return setTimeout(function() {
                  return t4.processQueue();
                }, 0);
            } }, { key: "_enqueueThumbnail", value: function(e5) {
              var t4 = this;
              if (this.options.createImageThumbnails && e5.type.match(/image.*/) && e5.size <= 1024 * this.options.maxThumbnailFilesize * 1024)
                return this._thumbnailQueue.push(e5), setTimeout(function() {
                  return t4._processThumbnailQueue();
                }, 0);
            } }, { key: "_processThumbnailQueue", value: function() {
              var e5 = this;
              if (!this._processingThumbnail && 0 !== this._thumbnailQueue.length) {
                this._processingThumbnail = true;
                var t4 = this._thumbnailQueue.shift();
                return this.createThumbnail(t4, this.options.thumbnailWidth, this.options.thumbnailHeight, this.options.thumbnailMethod, true, function(n3) {
                  return e5.emit("thumbnail", t4, n3), e5._processingThumbnail = false, e5._processThumbnailQueue();
                });
              }
            } }, { key: "removeFile", value: function(e5) {
              if (e5.status === o2.UPLOADING && this.cancelUpload(e5), this.files = s(this.files, e5), this.emit("removedfile", e5), 0 === this.files.length)
                return this.emit("reset");
            } }, { key: "removeAllFiles", value: function(e5) {
              null == e5 && (e5 = false);
              for (var t4 = 0, n3 = n3 = this.files.slice(); !(t4 >= n3.length); ) {
                var i2 = n3[t4++];
                (i2.status !== o2.UPLOADING || e5) && this.removeFile(i2);
              }
              return null;
            } }, { key: "resizeImage", value: function(e5, t4, n3, i2, r2) {
              var s2 = this;
              return this.createThumbnail(e5, t4, n3, i2, false, function(t5, n4) {
                if (null == n4)
                  return r2(e5);
                var i3 = s2.options.resizeMimeType;
                null == i3 && (i3 = e5.type);
                var a2 = n4.toDataURL(i3, s2.options.resizeQuality);
                return "image/jpeg" !== i3 && "image/jpg" !== i3 || (a2 = u.restore(e5.dataURL, a2)), r2(o2.dataURItoBlob(a2));
              });
            } }, { key: "createThumbnail", value: function(e5, t4, n3, i2, r2, o3) {
              var s2 = this, a2 = new FileReader();
              return a2.onload = function() {
                if (e5.dataURL = a2.result, "image/svg+xml" !== e5.type)
                  return s2.createThumbnailFromUrl(e5, t4, n3, i2, r2, o3);
                null != o3 && o3(a2.result);
              }, a2.readAsDataURL(e5);
            } }, { key: "createThumbnailFromUrl", value: function(e5, t4, n3, i2, r2, o3, s2) {
              var a2 = this, u2 = document.createElement("img");
              return s2 && (u2.crossOrigin = s2), u2.onload = function() {
                var s3 = function(e6) {
                  return e6(1);
                };
                return "undefined" != typeof EXIF && null !== EXIF && r2 && (s3 = function(e6) {
                  return EXIF.getData(u2, function() {
                    return e6(EXIF.getTag(this, "Orientation"));
                  });
                }), s3(function(r3) {
                  e5.width = u2.width, e5.height = u2.height;
                  var s4 = a2.options.resize.call(a2, e5, t4, n3, i2), c = document.createElement("canvas"), d = c.getContext("2d");
                  switch (c.width = s4.trgWidth, c.height = s4.trgHeight, r3 > 4 && (c.width = s4.trgHeight, c.height = s4.trgWidth), r3) {
                    case 2:
                      d.translate(c.width, 0), d.scale(-1, 1);
                      break;
                    case 3:
                      d.translate(c.width, c.height), d.rotate(Math.PI);
                      break;
                    case 4:
                      d.translate(0, c.height), d.scale(1, -1);
                      break;
                    case 5:
                      d.rotate(0.5 * Math.PI), d.scale(1, -1);
                      break;
                    case 6:
                      d.rotate(0.5 * Math.PI), d.translate(0, -c.height);
                      break;
                    case 7:
                      d.rotate(0.5 * Math.PI), d.translate(c.width, -c.height), d.scale(-1, 1);
                      break;
                    case 8:
                      d.rotate(-0.5 * Math.PI), d.translate(-c.width, 0);
                  }
                  l(d, u2, null != s4.srcX ? s4.srcX : 0, null != s4.srcY ? s4.srcY : 0, s4.srcWidth, s4.srcHeight, null != s4.trgX ? s4.trgX : 0, null != s4.trgY ? s4.trgY : 0, s4.trgWidth, s4.trgHeight);
                  var p = c.toDataURL("image/png");
                  if (null != o3)
                    return o3(p, c);
                });
              }, null != o3 && (u2.onerror = o3), u2.src = e5.dataURL;
            } }, { key: "processQueue", value: function() {
              var e5 = this.options.parallelUploads, t4 = this.getUploadingFiles().length, n3 = t4;
              if (!(t4 >= e5)) {
                var i2 = this.getQueuedFiles();
                if (i2.length > 0) {
                  if (this.options.uploadMultiple)
                    return this.processFiles(i2.slice(0, e5 - t4));
                  for (; n3 < e5; ) {
                    if (!i2.length)
                      return;
                    this.processFile(i2.shift()), n3++;
                  }
                }
              }
            } }, { key: "processFile", value: function(e5) {
              return this.processFiles([e5]);
            } }, { key: "processFiles", value: function(e5) {
              for (var t4 = 0, n3 = n3 = e5; !(t4 >= n3.length); ) {
                var i2 = n3[t4++];
                i2.processing = true, i2.status = o2.UPLOADING, this.emit("processing", i2);
              }
              return this.options.uploadMultiple && this.emit("processingmultiple", e5), this.uploadFiles(e5);
            } }, { key: "_getFilesWithXhr", value: function(e5) {
              return this.files.filter(function(t4) {
                return t4.xhr === e5;
              }).map(function(e6) {
                return e6;
              });
            } }, { key: "cancelUpload", value: function(e5) {
              if (e5.status === o2.UPLOADING) {
                for (var t4 = this._getFilesWithXhr(e5.xhr), n3 = 0, i2 = i2 = t4; !(n3 >= i2.length); )
                  i2[n3++].status = o2.CANCELED;
                void 0 !== e5.xhr && e5.xhr.abort();
                for (var r2 = 0, s2 = s2 = t4; !(r2 >= s2.length); ) {
                  var a2 = s2[r2++];
                  this.emit("canceled", a2);
                }
                this.options.uploadMultiple && this.emit("canceledmultiple", t4);
              } else
                e5.status !== o2.ADDED && e5.status !== o2.QUEUED || (e5.status = o2.CANCELED, this.emit("canceled", e5), this.options.uploadMultiple && this.emit("canceledmultiple", [e5]));
              if (this.options.autoProcessQueue)
                return this.processQueue();
            } }, { key: "resolveOption", value: function(e5) {
              if ("function" == typeof e5) {
                for (var t4 = arguments.length, n3 = Array(t4 > 1 ? t4 - 1 : 0), i2 = 1; i2 < t4; i2++)
                  n3[i2 - 1] = arguments[i2];
                return e5.apply(this, n3);
              }
              return e5;
            } }, { key: "uploadFile", value: function(e5) {
              return this.uploadFiles([e5]);
            } }, { key: "uploadFiles", value: function(e5) {
              var t4 = this;
              this._transformFiles(e5, function(n3) {
                if (e5[0].upload.chunked) {
                  var i2 = e5[0], r2 = n3[0];
                  i2.upload.chunks = [];
                  var s2 = function() {
                    for (var n4 = 0; void 0 !== i2.upload.chunks[n4]; )
                      n4++;
                    if (!(n4 >= i2.upload.totalChunkCount)) {
                      var s3 = n4 * t4.options.chunkSize, a3 = Math.min(s3 + t4.options.chunkSize, i2.size), l3 = { name: t4._getParamName(0), data: r2.webkitSlice ? r2.webkitSlice(s3, a3) : r2.slice(s3, a3), filename: i2.upload.filename, chunkIndex: n4 };
                      i2.upload.chunks[n4] = { file: i2, index: n4, dataBlock: l3, status: o2.UPLOADING, progress: 0, retries: 0 }, t4._uploadData(e5, [l3]);
                    }
                  };
                  if (i2.upload.finishedChunkUpload = function(n4) {
                    var r3 = true;
                    n4.status = o2.SUCCESS, n4.dataBlock = null;
                    for (var a3 = 0; a3 < i2.upload.totalChunkCount; a3++) {
                      if (void 0 === i2.upload.chunks[a3])
                        return s2();
                      i2.upload.chunks[a3].status !== o2.SUCCESS && (r3 = false);
                    }
                    r3 && t4.options.chunksUploaded(i2, function() {
                      t4._finished(e5, "", null);
                    });
                  }, t4.options.parallelChunkUploads)
                    for (var a2 = 0; a2 < i2.upload.totalChunkCount; a2++)
                      s2();
                  else
                    s2();
                } else {
                  for (var l2 = [], u2 = 0; u2 < e5.length; u2++)
                    l2[u2] = { name: t4._getParamName(u2), data: n3[u2], filename: e5[u2].upload.filename };
                  t4._uploadData(e5, l2);
                }
              });
            } }, { key: "_getChunk", value: function(e5, t4) {
              for (var n3 = 0; n3 < e5.upload.totalChunkCount; n3++)
                if (void 0 !== e5.upload.chunks[n3] && e5.upload.chunks[n3].xhr === t4)
                  return e5.upload.chunks[n3];
            } }, { key: "_uploadData", value: function(e5, t4) {
              for (var n3 = this, i2 = new XMLHttpRequest(), r2 = 0, s2 = s2 = e5; !(r2 >= s2.length); )
                s2[r2++].xhr = i2;
              e5[0].upload.chunked && (e5[0].upload.chunks[t4[0].chunkIndex].xhr = i2);
              var a2 = this.resolveOption(this.options.method, e5), l2 = this.resolveOption(this.options.url, e5);
              i2.open(a2, l2, true), i2.timeout = this.resolveOption(this.options.timeout, e5), i2.withCredentials = !!this.options.withCredentials, i2.onload = function(t5) {
                n3._finishedUploading(e5, i2, t5);
              }, i2.onerror = function() {
                n3._handleUploadError(e5, i2);
              }, (null != i2.upload ? i2.upload : i2).onprogress = function(t5) {
                return n3._updateFilesUploadProgress(e5, i2, t5);
              };
              var u2 = { Accept: "application/json", "Cache-Control": "no-cache", "X-Requested-With": "XMLHttpRequest" };
              for (var c in this.options.headers && o2.extend(u2, this.options.headers), u2) {
                var d = u2[c];
                d && i2.setRequestHeader(c, d);
              }
              var p = new FormData();
              if (this.options.params) {
                var h = this.options.params;
                for (var f in "function" == typeof h && (h = h.call(this, e5, i2, e5[0].upload.chunked ? this._getChunk(e5[0], i2) : null)), h) {
                  var m = h[f];
                  p.append(f, m);
                }
              }
              for (var v = 0, g = g = e5; !(v >= g.length); ) {
                var y = g[v++];
                this.emit("sending", y, i2, p);
              }
              this.options.uploadMultiple && this.emit("sendingmultiple", e5, i2, p), this._addFormElementData(p);
              for (var k = 0; k < t4.length; k++) {
                var b = t4[k];
                p.append(b.name, b.data, b.filename);
              }
              this.submitRequest(i2, p, e5);
            } }, { key: "_transformFiles", value: function(e5, t4) {
              for (var n3 = this, i2 = [], r2 = 0, o3 = 0; o3 < e5.length; o3++)
                !function(o4) {
                  n3.options.transformFile.call(n3, e5[o4], function(n4) {
                    i2[o4] = n4, ++r2 === e5.length && t4(i2);
                  });
                }(o3);
            } }, { key: "_addFormElementData", value: function(e5) {
              if ("FORM" === this.element.tagName)
                for (var t4 = 0, n3 = n3 = this.element.querySelectorAll("input, textarea, select, button"); !(t4 >= n3.length); ) {
                  var i2 = n3[t4++], r2 = i2.getAttribute("name"), o3 = i2.getAttribute("type");
                  if (o3 && (o3 = o3.toLowerCase()), void 0 !== r2 && null !== r2)
                    if ("SELECT" === i2.tagName && i2.hasAttribute("multiple"))
                      for (var s2 = 0, a2 = a2 = i2.options; !(s2 >= a2.length); ) {
                        var l2 = a2[s2++];
                        l2.selected && e5.append(r2, l2.value);
                      }
                    else
                      (!o3 || "checkbox" !== o3 && "radio" !== o3 || i2.checked) && e5.append(r2, i2.value);
                }
            } }, { key: "_updateFilesUploadProgress", value: function(e5, t4, n3) {
              var i2 = void 0;
              if (void 0 !== n3) {
                if (i2 = 100 * n3.loaded / n3.total, e5[0].upload.chunked) {
                  var r2 = e5[0], o3 = this._getChunk(r2, t4);
                  o3.progress = i2, o3.total = n3.total, o3.bytesSent = n3.loaded, r2.upload.progress = 0, r2.upload.total = 0, r2.upload.bytesSent = 0;
                  for (var s2 = 0; s2 < r2.upload.totalChunkCount; s2++)
                    void 0 !== r2.upload.chunks[s2] && void 0 !== r2.upload.chunks[s2].progress && (r2.upload.progress += r2.upload.chunks[s2].progress, r2.upload.total += r2.upload.chunks[s2].total, r2.upload.bytesSent += r2.upload.chunks[s2].bytesSent);
                  r2.upload.progress = r2.upload.progress / r2.upload.totalChunkCount;
                } else
                  for (var a2 = 0, l2 = l2 = e5; !(a2 >= l2.length); ) {
                    var u2 = l2[a2++];
                    u2.upload.progress = i2, u2.upload.total = n3.total, u2.upload.bytesSent = n3.loaded;
                  }
                for (var c = 0, d = d = e5; !(c >= d.length); ) {
                  var p = d[c++];
                  this.emit("uploadprogress", p, p.upload.progress, p.upload.bytesSent);
                }
              } else {
                var h = true;
                i2 = 100;
                for (var f = 0, m = m = e5; !(f >= m.length); ) {
                  var v = m[f++];
                  100 === v.upload.progress && v.upload.bytesSent === v.upload.total || (h = false), v.upload.progress = i2, v.upload.bytesSent = v.upload.total;
                }
                if (h)
                  return;
                for (var g = 0, y = y = e5; !(g >= y.length); ) {
                  var k = y[g++];
                  this.emit("uploadprogress", k, i2, k.upload.bytesSent);
                }
              }
            } }, { key: "_finishedUploading", value: function(e5, t4, n3) {
              var i2 = void 0;
              if (e5[0].status !== o2.CANCELED && 4 === t4.readyState) {
                if ("arraybuffer" !== t4.responseType && "blob" !== t4.responseType && (i2 = t4.responseText, t4.getResponseHeader("content-type") && ~t4.getResponseHeader("content-type").indexOf("application/json")))
                  try {
                    i2 = JSON.parse(i2);
                  } catch (e6) {
                    n3 = e6, i2 = "Invalid JSON response from server.";
                  }
                this._updateFilesUploadProgress(e5), 200 <= t4.status && t4.status < 300 ? e5[0].upload.chunked ? e5[0].upload.finishedChunkUpload(this._getChunk(e5[0], t4)) : this._finished(e5, i2, n3) : this._handleUploadError(e5, t4, i2);
              }
            } }, { key: "_handleUploadError", value: function(e5, t4, n3) {
              if (e5[0].status !== o2.CANCELED) {
                if (e5[0].upload.chunked && this.options.retryChunks) {
                  var i2 = this._getChunk(e5[0], t4);
                  if (i2.retries++ < this.options.retryChunksLimit)
                    return void this._uploadData(e5, [i2.dataBlock]);
                  console.warn("Retried this chunk too often. Giving up.");
                }
                for (var r2 = 0, s2 = s2 = e5; !(r2 >= s2.length); )
                  s2[r2++], this._errorProcessing(e5, n3 || this.options.dictResponseError.replace("{{statusCode}}", t4.status), t4);
              }
            } }, { key: "submitRequest", value: function(e5, t4, n3) {
              e5.send(t4);
            } }, { key: "_finished", value: function(e5, t4, n3) {
              for (var i2 = 0, r2 = r2 = e5; !(i2 >= r2.length); ) {
                var s2 = r2[i2++];
                s2.status = o2.SUCCESS, this.emit("success", s2, t4, n3), this.emit("complete", s2);
              }
              if (this.options.uploadMultiple && (this.emit("successmultiple", e5, t4, n3), this.emit("completemultiple", e5)), this.options.autoProcessQueue)
                return this.processQueue();
            } }, { key: "_errorProcessing", value: function(e5, t4, n3) {
              for (var i2 = 0, r2 = r2 = e5; !(i2 >= r2.length); ) {
                var s2 = r2[i2++];
                s2.status = o2.ERROR, this.emit("error", s2, t4, n3), this.emit("complete", s2);
              }
              if (this.options.uploadMultiple && (this.emit("errormultiple", e5, t4, n3), this.emit("completemultiple", e5)), this.options.autoProcessQueue)
                return this.processQueue();
            } }], [{ key: "uuidv4", value: function() {
              return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(e5) {
                var t4 = 16 * Math.random() | 0;
                return ("x" === e5 ? t4 : 3 & t4 | 8).toString(16);
              });
            } }]), o2;
          }();
          o.initClass(), o.version = "5.4.0", o.options = {}, o.optionsForElement = function(e4) {
            return e4.getAttribute("id") ? o.options[a(e4.getAttribute("id"))] : void 0;
          }, o.instances = [], o.forElement = function(e4) {
            if ("string" == typeof e4 && (e4 = document.querySelector(e4)), null == (null != e4 ? e4.dropzone : void 0))
              throw new Error("No Dropzone found for given element. This is probably because you're trying to access it before Dropzone had the time to initialize. Use the `init` option to setup any additional observers on your Dropzone.");
            return e4.dropzone;
          }, o.autoDiscover = true, o.discover = function() {
            var e4 = void 0;
            if (document.querySelectorAll)
              e4 = document.querySelectorAll(".dropzone");
            else {
              e4 = [];
              var t4 = function(t5) {
                return function() {
                  for (var n3 = [], i2 = 0, r2 = r2 = t5; !(i2 >= r2.length); ) {
                    var o2 = r2[i2++];
                    /(^| )dropzone($| )/.test(o2.className) ? n3.push(e4.push(o2)) : n3.push(void 0);
                  }
                  return n3;
                }();
              };
              t4(document.getElementsByTagName("div")), t4(document.getElementsByTagName("form"));
            }
            return function() {
              for (var t5 = [], n3 = 0, i2 = i2 = e4; !(n3 >= i2.length); ) {
                var r2 = i2[n3++];
                false !== o.optionsForElement(r2) ? t5.push(new o(r2)) : t5.push(void 0);
              }
              return t5;
            }();
          }, o.blacklistedBrowsers = [/opera.*(Macintosh|Windows Phone).*version\/12/i], o.isBrowserSupported = function() {
            var e4 = true;
            if (window.File && window.FileReader && window.FileList && window.Blob && window.FormData && document.querySelector)
              if ("classList" in document.createElement("a"))
                for (var t4 = 0, n3 = n3 = o.blacklistedBrowsers; !(t4 >= n3.length); )
                  n3[t4++].test(navigator.userAgent) && (e4 = false);
              else
                e4 = false;
            else
              e4 = false;
            return e4;
          }, o.dataURItoBlob = function(e4) {
            for (var t4 = atob(e4.split(",")[1]), n3 = e4.split(",")[0].split(":")[1].split(";")[0], i2 = new ArrayBuffer(t4.length), r2 = new Uint8Array(i2), o2 = 0, s2 = t4.length, a2 = 0 <= s2; a2 ? o2 <= s2 : o2 >= s2; a2 ? o2++ : o2--)
              r2[o2] = t4.charCodeAt(o2);
            return new Blob([i2], { type: n3 });
          };
          var s = function(e4, t4) {
            return e4.filter(function(e5) {
              return e5 !== t4;
            }).map(function(e5) {
              return e5;
            });
          }, a = function(e4) {
            return e4.replace(/[\-_](\w)/g, function(e5) {
              return e5.charAt(1).toUpperCase();
            });
          };
          o.createElement = function(e4) {
            var t4 = document.createElement("div");
            return t4.innerHTML = e4, t4.childNodes[0];
          }, o.elementInside = function(e4, t4) {
            if (e4 === t4)
              return true;
            for (; e4 = e4.parentNode; )
              if (e4 === t4)
                return true;
            return false;
          }, o.getElement = function(e4, t4) {
            var n3 = void 0;
            if ("string" == typeof e4 ? n3 = document.querySelector(e4) : null != e4.nodeType && (n3 = e4), null == n3)
              throw new Error("Invalid `" + t4 + "` option provided. Please provide a CSS selector or a plain HTML element.");
            return n3;
          }, o.getElements = function(e4, t4) {
            var n3 = void 0, i2 = void 0;
            if (e4 instanceof Array) {
              i2 = [];
              try {
                for (var r2 = 0, o2 = o2 = e4; !(r2 >= o2.length); )
                  n3 = o2[r2++], i2.push(this.getElement(n3, t4));
              } catch (e5) {
                i2 = null;
              }
            } else if ("string" == typeof e4) {
              i2 = [];
              for (var s2 = 0, a2 = a2 = document.querySelectorAll(e4); !(s2 >= a2.length); )
                n3 = a2[s2++], i2.push(n3);
            } else
              null != e4.nodeType && (i2 = [e4]);
            if (null == i2 || !i2.length)
              throw new Error("Invalid `" + t4 + "` option provided. Please provide a CSS selector, a plain HTML element or a list of those.");
            return i2;
          }, o.confirm = function(e4, t4, n3) {
            return window.confirm(e4) ? t4() : null != n3 ? n3() : void 0;
          }, o.isValidFile = function(e4, t4) {
            if (!t4)
              return true;
            t4 = t4.split(",");
            for (var n3 = e4.type, i2 = n3.replace(/\/.*$/, ""), r2 = 0, o2 = o2 = t4; !(r2 >= o2.length); ) {
              var s2 = o2[r2++];
              if ("." === (s2 = s2.trim()).charAt(0)) {
                if (-1 !== e4.name.toLowerCase().indexOf(s2.toLowerCase(), e4.name.length - s2.length))
                  return true;
              } else if (/\/\*$/.test(s2)) {
                if (i2 === s2.replace(/\/.*$/, ""))
                  return true;
              } else if (n3 === s2)
                return true;
            }
            return false;
          }, "undefined" != typeof jQuery && null !== jQuery && (jQuery.fn.dropzone = function(e4) {
            return this.each(function() {
              return new o(this, e4);
            });
          }), void 0 !== e3 && null !== e3 ? e3.exports = o : window.Dropzone = o, o.ADDED = "added", o.QUEUED = "queued", o.ACCEPTED = o.QUEUED, o.UPLOADING = "uploading", o.PROCESSING = o.UPLOADING, o.CANCELED = "canceled", o.ERROR = "error", o.SUCCESS = "success";
          var l = function(e4, t4, n3, i2, r2, o2, s2, a2, l2, u2) {
            var c = function(e5) {
              e5.naturalWidth;
              var t5 = e5.naturalHeight, n4 = document.createElement("canvas");
              n4.width = 1, n4.height = t5;
              var i3 = n4.getContext("2d");
              i3.drawImage(e5, 0, 0);
              for (var r3 = i3.getImageData(1, 0, 1, t5).data, o3 = 0, s3 = t5, a3 = t5; a3 > o3; )
                0 === r3[4 * (a3 - 1) + 3] ? s3 = a3 : o3 = a3, a3 = s3 + o3 >> 1;
              var l3 = a3 / t5;
              return 0 === l3 ? 1 : l3;
            }(t4);
            return e4.drawImage(t4, n3, i2, r2, o2, s2, a2, l2, u2 / c);
          }, u = function() {
            function e4() {
              n2(this, e4);
            }
            return i(e4, null, [{ key: "initClass", value: function() {
              this.KEY_STR = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
            } }, { key: "encode64", value: function(e5) {
              for (var t4 = "", n3 = void 0, i2 = void 0, r2 = "", o2 = void 0, s2 = void 0, a2 = void 0, l2 = "", u2 = 0; o2 = (n3 = e5[u2++]) >> 2, s2 = (3 & n3) << 4 | (i2 = e5[u2++]) >> 4, a2 = (15 & i2) << 2 | (r2 = e5[u2++]) >> 6, l2 = 63 & r2, isNaN(i2) ? a2 = l2 = 64 : isNaN(r2) && (l2 = 64), t4 = t4 + this.KEY_STR.charAt(o2) + this.KEY_STR.charAt(s2) + this.KEY_STR.charAt(a2) + this.KEY_STR.charAt(l2), n3 = i2 = r2 = "", o2 = s2 = a2 = l2 = "", u2 < e5.length; )
                ;
              return t4;
            } }, { key: "restore", value: function(e5, t4) {
              if (!e5.match("data:image/jpeg;base64,"))
                return t4;
              var n3 = this.decode64(e5.replace("data:image/jpeg;base64,", "")), i2 = this.slice2Segments(n3), r2 = this.exifManipulation(t4, i2);
              return "data:image/jpeg;base64," + this.encode64(r2);
            } }, { key: "exifManipulation", value: function(e5, t4) {
              var n3 = this.getExifArray(t4), i2 = this.insertExif(e5, n3);
              return new Uint8Array(i2);
            } }, { key: "getExifArray", value: function(e5) {
              for (var t4 = void 0, n3 = 0; n3 < e5.length; ) {
                if (255 === (t4 = e5[n3])[0] & 225 === t4[1])
                  return t4;
                n3++;
              }
              return [];
            } }, { key: "insertExif", value: function(e5, t4) {
              var n3 = e5.replace("data:image/jpeg;base64,", ""), i2 = this.decode64(n3), r2 = i2.indexOf(255, 3), o2 = i2.slice(0, r2), s2 = i2.slice(r2), a2 = o2;
              return a2 = (a2 = a2.concat(t4)).concat(s2);
            } }, { key: "slice2Segments", value: function(e5) {
              for (var t4 = 0, n3 = []; !(255 === e5[t4] & 218 === e5[t4 + 1]); ) {
                if (255 === e5[t4] & 216 === e5[t4 + 1])
                  t4 += 2;
                else {
                  var i2 = t4 + (256 * e5[t4 + 2] + e5[t4 + 3]) + 2, r2 = e5.slice(t4, i2);
                  n3.push(r2), t4 = i2;
                }
                if (t4 > e5.length)
                  break;
              }
              return n3;
            } }, { key: "decode64", value: function(e5) {
              var t4 = void 0, n3 = void 0, i2 = "", r2 = void 0, o2 = void 0, s2 = "", a2 = 0, l2 = [];
              for (/[^A-Za-z0-9\+\/\=]/g.exec(e5) && console.warn("There were invalid base64 characters in the input text.\nValid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\nExpect errors in decoding."), e5 = e5.replace(/[^A-Za-z0-9\+\/\=]/g, ""); t4 = this.KEY_STR.indexOf(e5.charAt(a2++)) << 2 | (r2 = this.KEY_STR.indexOf(e5.charAt(a2++))) >> 4, n3 = (15 & r2) << 4 | (o2 = this.KEY_STR.indexOf(e5.charAt(a2++))) >> 2, i2 = (3 & o2) << 6 | (s2 = this.KEY_STR.indexOf(e5.charAt(a2++))), l2.push(t4), 64 !== o2 && l2.push(n3), 64 !== s2 && l2.push(i2), t4 = n3 = i2 = "", r2 = o2 = s2 = "", a2 < e5.length; )
                ;
              return l2;
            } }]), e4;
          }();
          u.initClass(), o._autoDiscoverFunction = function() {
            if (o.autoDiscover)
              return o.discover();
          }, function(e4, t4) {
            var n3 = false, i2 = true, r2 = e4.document, o2 = r2.documentElement, s2 = r2.addEventListener ? "addEventListener" : "attachEvent", a2 = r2.addEventListener ? "removeEventListener" : "detachEvent", l2 = r2.addEventListener ? "" : "on", u2 = function i3(o3) {
              if ("readystatechange" !== o3.type || "complete" === r2.readyState)
                return ("load" === o3.type ? e4 : r2)[a2](l2 + o3.type, i3, false), !n3 && (n3 = true) ? t4.call(e4, o3.type || o3) : void 0;
            };
            if ("complete" !== r2.readyState) {
              if (r2.createEventObject && o2.doScroll) {
                try {
                  i2 = !e4.frameElement;
                } catch (e5) {
                }
                i2 && function e5() {
                  try {
                    o2.doScroll("left");
                  } catch (t5) {
                    return void setTimeout(e5, 50);
                  }
                  return u2("poll");
                }();
              }
              r2[s2](l2 + "DOMContentLoaded", u2, false), r2[s2](l2 + "readystatechange", u2, false), e4[s2](l2 + "load", u2, false);
            }
          }(window, o._autoDiscoverFunction);
        }).call(t2, n(6)(e2));
      }, function(e2, t2) {
        e2.exports = function(e3) {
          return e3.webpackPolyfill || (e3.deprecate = function() {
          }, e3.paths = [], e3.children || (e3.children = []), Object.defineProperty(e3, "loaded", { enumerable: true, get: function() {
            return e3.l;
          } }), Object.defineProperty(e3, "id", { enumerable: true, get: function() {
            return e3.i;
          } }), e3.webpackPolyfill = 1), e3;
        };
      }]);
    });
  }
});
export default require_react_dropzone();
//# sourceMappingURL=react-dropzone-component.js.map
